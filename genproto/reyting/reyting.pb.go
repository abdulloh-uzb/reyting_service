// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reyting/reyting.proto

package reyting

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ranking struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Ranking              int64    `protobuf:"varint,2,opt,name=ranking,proto3" json:"ranking"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	PostId               int64    `protobuf:"varint,4,opt,name=post_id,json=postId,proto3" json:"post_id"`
	CustomerId           int64    `protobuf:"varint,5,opt,name=customer_id,json=customerId,proto3" json:"customer_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ranking) Reset()         { *m = Ranking{} }
func (m *Ranking) String() string { return proto.CompactTextString(m) }
func (*Ranking) ProtoMessage()    {}
func (*Ranking) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d96215f86e97cc8, []int{0}
}
func (m *Ranking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ranking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ranking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ranking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ranking.Merge(m, src)
}
func (m *Ranking) XXX_Size() int {
	return m.Size()
}
func (m *Ranking) XXX_DiscardUnknown() {
	xxx_messageInfo_Ranking.DiscardUnknown(m)
}

var xxx_messageInfo_Ranking proto.InternalMessageInfo

func (m *Ranking) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ranking) GetRanking() int64 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *Ranking) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Ranking) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *Ranking) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

type Rankings struct {
	Rankings             []*Ranking `protobuf:"bytes,1,rep,name=rankings,proto3" json:"rankings"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Rankings) Reset()         { *m = Rankings{} }
func (m *Rankings) String() string { return proto.CompactTextString(m) }
func (*Rankings) ProtoMessage()    {}
func (*Rankings) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d96215f86e97cc8, []int{1}
}
func (m *Rankings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rankings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rankings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rankings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rankings.Merge(m, src)
}
func (m *Rankings) XXX_Size() int {
	return m.Size()
}
func (m *Rankings) XXX_DiscardUnknown() {
	xxx_messageInfo_Rankings.DiscardUnknown(m)
}

var xxx_messageInfo_Rankings proto.InternalMessageInfo

func (m *Rankings) GetRankings() []*Ranking {
	if m != nil {
		return m.Rankings
	}
	return nil
}

type Id struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d96215f86e97cc8, []int{2}
}
func (m *Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return m.Size()
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d96215f86e97cc8, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Ranking)(nil), "reyting.Ranking")
	proto.RegisterType((*Rankings)(nil), "reyting.Rankings")
	proto.RegisterType((*Id)(nil), "reyting.id")
	proto.RegisterType((*Empty)(nil), "reyting.Empty")
}

func init() { proto.RegisterFile("reyting/reyting.proto", fileDescriptor_7d96215f86e97cc8) }

var fileDescriptor_7d96215f86e97cc8 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0xbf, 0x6d, 0x81, 0xf2, 0x4d, 0x23, 0xc1, 0x89, 0x84, 0xca, 0xa1, 0x36, 0x3d, 0x71,
	0x50, 0x8c, 0xe8, 0x01, 0xaf, 0xa0, 0x31, 0xdc, 0x4c, 0x7d, 0x00, 0x83, 0xec, 0x86, 0x6c, 0x94,
	0xb6, 0xd9, 0x5d, 0x4d, 0xfa, 0x1c, 0x5e, 0xbc, 0xf8, 0x3e, 0x1e, 0x7d, 0x04, 0x83, 0x2f, 0x62,
	0x58, 0xb6, 0x1b, 0xac, 0x31, 0x5e, 0xda, 0xce, 0xfc, 0xe7, 0x37, 0xf3, 0x9f, 0x49, 0xa1, 0x23,
	0x58, 0xa1, 0x78, 0xba, 0x38, 0x36, 0xef, 0x41, 0x2e, 0x32, 0x95, 0xa1, 0x67, 0xc2, 0xf8, 0x99,
	0x80, 0x97, 0xcc, 0xd2, 0x7b, 0x9e, 0x2e, 0x10, 0xa1, 0x96, 0xce, 0x96, 0x2c, 0x20, 0x11, 0xe9,
	0xff, 0x4f, 0xf4, 0x37, 0x06, 0xe0, 0x89, 0x8d, 0x1c, 0x38, 0x11, 0xe9, 0xbb, 0x49, 0x19, 0x62,
	0x04, 0x3e, 0x65, 0x72, 0x2e, 0x78, 0xae, 0x78, 0x96, 0x06, 0xae, 0x86, 0xb6, 0x53, 0xd8, 0x05,
	0x2f, 0xcf, 0xa4, 0xba, 0xe5, 0x34, 0xa8, 0x69, 0xb6, 0xb1, 0x0e, 0xa7, 0x14, 0x0f, 0xc0, 0x9f,
	0x3f, 0x4a, 0x95, 0x2d, 0x99, 0x58, 0x8b, 0x75, 0x2d, 0x42, 0x99, 0x9a, 0xd2, 0x78, 0x04, 0x4d,
	0x63, 0x4a, 0xe2, 0x21, 0x34, 0xcd, 0x48, 0x19, 0x90, 0xc8, 0xed, 0xfb, 0xc3, 0xf6, 0xa0, 0x5c,
	0xc6, 0x14, 0x25, 0xb6, 0x22, 0xde, 0x03, 0x87, 0x53, 0x6c, 0xad, 0x9f, 0x7a, 0x0f, 0x37, 0x71,
	0x38, 0x8d, 0x3d, 0xa8, 0x5f, 0x2e, 0x73, 0x55, 0x0c, 0x5f, 0x1d, 0x68, 0x19, 0xe8, 0x86, 0x89,
	0x27, 0x3e, 0x67, 0x78, 0x02, 0x3b, 0x13, 0xc1, 0x66, 0x8a, 0x95, 0x67, 0xf8, 0xd1, 0xbe, 0xd7,
	0xb2, 0x19, 0xdd, 0x05, 0x8f, 0xc0, 0xbf, 0x62, 0xca, 0x3a, 0xf4, 0xad, 0xcc, 0x69, 0x6f, 0xb7,
	0x4a, 0x4b, 0x3c, 0x87, 0xee, 0x56, 0xf9, 0xb8, 0x98, 0xd8, 0x45, 0xff, 0x44, 0xcf, 0xa0, 0x73,
	0xc1, 0x1e, 0x98, 0x35, 0x37, 0x2e, 0xae, 0x37, 0x27, 0xfc, 0x06, 0x56, 0xfd, 0x8d, 0x60, 0xbf,
	0x42, 0xfd, 0x36, 0xb2, 0x42, 0x8e, 0xdb, 0x6f, 0xab, 0x90, 0xbc, 0xaf, 0x42, 0xf2, 0xb1, 0x0a,
	0xc9, 0xcb, 0x67, 0xf8, 0xef, 0xae, 0xa1, 0x7f, 0x98, 0xd3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0x9c, 0xd7, 0x52, 0x49, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RankingServiceClient is the client API for RankingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RankingServiceClient interface {
	CreateRanking(ctx context.Context, in *Ranking, opts ...grpc.CallOption) (*Empty, error)
	GetRankings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rankings, error)
	GetRankingsByCustomerId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rankings, error)
	DeleteRankingByPostId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	DeleteRankingByCustomerId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type rankingServiceClient struct {
	cc *grpc.ClientConn
}

func NewRankingServiceClient(cc *grpc.ClientConn) RankingServiceClient {
	return &rankingServiceClient{cc}
}

func (c *rankingServiceClient) CreateRanking(ctx context.Context, in *Ranking, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/reyting.RankingService/CreateRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) GetRankings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rankings, error) {
	out := new(Rankings)
	err := c.cc.Invoke(ctx, "/reyting.RankingService/GetRankings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) GetRankingsByCustomerId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rankings, error) {
	out := new(Rankings)
	err := c.cc.Invoke(ctx, "/reyting.RankingService/GetRankingsByCustomerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DeleteRankingByPostId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/reyting.RankingService/DeleteRankingByPostId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DeleteRankingByCustomerId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/reyting.RankingService/DeleteRankingByCustomerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankingServiceServer is the server API for RankingService service.
type RankingServiceServer interface {
	CreateRanking(context.Context, *Ranking) (*Empty, error)
	GetRankings(context.Context, *Id) (*Rankings, error)
	GetRankingsByCustomerId(context.Context, *Id) (*Rankings, error)
	DeleteRankingByPostId(context.Context, *Id) (*Empty, error)
	DeleteRankingByCustomerId(context.Context, *Id) (*Empty, error)
}

// UnimplementedRankingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRankingServiceServer struct {
}

func (*UnimplementedRankingServiceServer) CreateRanking(ctx context.Context, req *Ranking) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRanking not implemented")
}
func (*UnimplementedRankingServiceServer) GetRankings(ctx context.Context, req *Id) (*Rankings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankings not implemented")
}
func (*UnimplementedRankingServiceServer) GetRankingsByCustomerId(ctx context.Context, req *Id) (*Rankings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankingsByCustomerId not implemented")
}
func (*UnimplementedRankingServiceServer) DeleteRankingByPostId(ctx context.Context, req *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRankingByPostId not implemented")
}
func (*UnimplementedRankingServiceServer) DeleteRankingByCustomerId(ctx context.Context, req *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRankingByCustomerId not implemented")
}

func RegisterRankingServiceServer(s *grpc.Server, srv RankingServiceServer) {
	s.RegisterService(&_RankingService_serviceDesc, srv)
}

func _RankingService_CreateRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ranking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).CreateRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reyting.RankingService/CreateRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).CreateRanking(ctx, req.(*Ranking))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_GetRankings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).GetRankings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reyting.RankingService/GetRankings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).GetRankings(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_GetRankingsByCustomerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).GetRankingsByCustomerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reyting.RankingService/GetRankingsByCustomerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).GetRankingsByCustomerId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_DeleteRankingByPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).DeleteRankingByPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reyting.RankingService/DeleteRankingByPostId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).DeleteRankingByPostId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_DeleteRankingByCustomerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).DeleteRankingByCustomerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reyting.RankingService/DeleteRankingByCustomerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).DeleteRankingByCustomerId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _RankingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reyting.RankingService",
	HandlerType: (*RankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRanking",
			Handler:    _RankingService_CreateRanking_Handler,
		},
		{
			MethodName: "GetRankings",
			Handler:    _RankingService_GetRankings_Handler,
		},
		{
			MethodName: "GetRankingsByCustomerId",
			Handler:    _RankingService_GetRankingsByCustomerId_Handler,
		},
		{
			MethodName: "DeleteRankingByPostId",
			Handler:    _RankingService_DeleteRankingByPostId_Handler,
		},
		{
			MethodName: "DeleteRankingByCustomerId",
			Handler:    _RankingService_DeleteRankingByCustomerId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reyting/reyting.proto",
}

func (m *Ranking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ranking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ranking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CustomerId != 0 {
		i = encodeVarintReyting(dAtA, i, uint64(m.CustomerId))
		i--
		dAtA[i] = 0x28
	}
	if m.PostId != 0 {
		i = encodeVarintReyting(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReyting(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ranking != 0 {
		i = encodeVarintReyting(dAtA, i, uint64(m.Ranking))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReyting(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rankings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rankings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rankings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rankings) > 0 {
		for iNdEx := len(m.Rankings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rankings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReyting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintReyting(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintReyting(dAtA []byte, offset int, v uint64) int {
	offset -= sovReyting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ranking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReyting(uint64(l))
	}
	if m.Ranking != 0 {
		n += 1 + sovReyting(uint64(m.Ranking))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReyting(uint64(l))
	}
	if m.PostId != 0 {
		n += 1 + sovReyting(uint64(m.PostId))
	}
	if m.CustomerId != 0 {
		n += 1 + sovReyting(uint64(m.CustomerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rankings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 1 + l + sovReyting(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReyting(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReyting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReyting(x uint64) (n int) {
	return sovReyting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ranking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReyting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ranking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ranking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReyting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReyting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReyting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReyting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReyting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReyting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rankings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReyting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rankings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rankings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReyting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReyting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &Ranking{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReyting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReyting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReyting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReyting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReyting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReyting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReyting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReyting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReyting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReyting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReyting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReyting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReyting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReyting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReyting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReyting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReyting = fmt.Errorf("proto: unexpected end of group")
)
